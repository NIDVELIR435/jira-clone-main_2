{"version":3,"sources":["common/enums.ts","apis/utils/index.ts","schemas/common.ts","schemas/apis/jsonplaceholder/users/index.ts","schemas/entities/user.ts","schemas/entities/task.ts","ui/components/task/task.types.ts","schemas/apis/jsonplaceholder/tasks/index.ts","apis/jsonplaceholder/common.ts","apis/jsonplaceholder/users.ts","state/slices/tasks/tasks.utils.ts","state/slices/tasks/tasks.slice.ts","apis/jsonplaceholder/tasks.ts","state/slices/tasks/tasts.selectors.ts","state/slices/users/users.slice.ts","state/slices/users/users.selectors.ts","state/store.ts","state/hooks.ts","ui/common/enum-display-names.ts","ui/components/user-avatar/user-avatar.utils.ts","ui/components/user-avatar/user-avatar.component.tsx","ui/components/task/task.component.tsx","ui/components/tasks-board-column/tasks-board-column.component.tsx","ui/components/spinner/spinner.component.tsx","ui/components/tasks-board/tasks-board.component.tsx","ui/components/tasks-list/tasks-list.component.tsx","ui/pages/jira/jira.component.tsx","ui/app/app.tsx","serviceWorker.ts","ui/index.tsx"],"names":["Status","validateFormatAxiosResponse","schema","res","parseAsync","data","id","z","number","getAllUsersSchema","array","userSchema","object","name","string","TaskType","getAllTasksSchema","taskSchema","userId","title","status","nativeEnum","default","TODO","jsonplaceholderClient","Axios","baseURL","process","responseType","transformResponse","JSON","parse","getAllUsers","a","get","then","statusStateMachine","IN_PROGRESS","DONE","tasksSliceName","fetchTasks","createAsyncThunk","getAllTasks","tasksSlice","createSlice","initialState","loading","entities","reducers","setNextTaskState","state","payload","task","_","isNil","getNextStatus","currentStatus","extraReducers","builder","addCase","fulfilled","forEach","tasksReducer","reducer","actions","statusOrder","selectTasksLoading","tasks","selectAllTasks","Object","values","sort","statusA","statusB","usersSliceName","fetchUsers","usersReducer","user","selectUsersLoading","users","store","configureStore","useAppDispatch","useDispatch","useSelector","statusDisplayNames","getStatusDisplayName","sanitizeWhitespaces","str","doubleWhitespaces","singleWhitespace","resultString","includes","replaceAll","stringAvatar","colorHash","ColorHash","split","firstNameFirstLetter","lastNameFirstLetter","sx","bgcolor","hex","children","toUpperCase","UserAvatar","isUserLoading","selectUserById","Skeleton","variant","className","Tooltip","Avatar","Task","taskType","style","dispatch","handleChangeStatus","flow","isFullTask","FULL","ListItem","onClick","ListItemAvatar","ListItemText","primary","TasksBoardColumn","selectTasksWithStatus","filter","Typography","List","itemContent","index","SHORT","Spinner","CircularProgress","TasksBoard","isLoading","Paper","TasksList","isTasksLoading","Jira","useEffect","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.608f25f1.chunk.js","sourcesContent":["export enum Status {\n  TODO = \"todo\",\n  IN_PROGRESS = \"inProgress\",\n  DONE = \"done\",\n}\n","import type { ZodTypeAny } from \"zod\";\nimport type { AxiosResponse } from \"axios\";\n\nexport const validateFormatAxiosResponse =\n  <T>(schema: ZodTypeAny) =>\n  (res: AxiosResponse<T>): Promise<T> =>\n    schema.parseAsync(res.data);\n","import { z } from \"zod\";\n\nimport { Id } from \"common\";\n\nexport const id = (): z.Schema<Id> => z.number();\n","import { z } from \"zod\";\n\nimport { userSchema } from \"schemas/entities/user\";\n\nexport const getAllUsersSchema = (): z.ZodArray<\n  ReturnType<typeof userSchema>\n> => z.array(userSchema());\n","import { z } from \"zod\";\n\nimport { id } from \"schemas/common\";\n\nexport const userSchema = (): z.SomeZodObject =>\n  z.object({\n    id: id(),\n    name: z.string(),\n  });\n","import { z } from \"zod\";\n\nimport { Status } from \"common\";\n\nimport { id } from \"schemas/common\";\n\nexport const taskSchema = (): z.SomeZodObject =>\n  z.object({\n    id: id(),\n    userId: id(),\n    title: z.string(),\n    status: z.nativeEnum(Status).default(Status.TODO),\n  });\n","export enum TaskType {\n  FULL = \"full\",\n  SHORT = \"short\",\n}\n","import { z } from \"zod\";\n\nimport { taskSchema } from \"schemas/entities\";\n\nexport const getAllTasksSchema = (): z.ZodArray<\n  ReturnType<typeof taskSchema>\n> => z.array(taskSchema());\n","import { Axios } from \"axios\";\n\nexport const jsonplaceholderClient = new Axios({\n  baseURL: process.env.REACT_APP_JSONPLACEHOLDER_HOST_URL,\n  responseType: \"json\",\n  transformResponse: (res) => JSON.parse(res),\n});\n","import { User } from \"common\";\n\nimport { validateFormatAxiosResponse } from \"apis/utils\";\n\nimport { getAllUsersSchema } from \"schemas\";\n\nimport { jsonplaceholderClient } from \"./common\";\n\nexport const getAllUsers = async (): Promise<Array<User>> =>\n  jsonplaceholderClient\n    .get<Array<User>>(\"/users\")\n    .then(validateFormatAxiosResponse(getAllUsersSchema()));\n","import { Status } from \"common\";\n\nconst statusStateMachine = {\n  [Status.TODO]: Status.IN_PROGRESS,\n  [Status.IN_PROGRESS]: Status.DONE,\n  [Status.DONE]: Status.TODO,\n} as const;\n\nexport const getNextStatus = (currentStatus: Status): Status =>\n  statusStateMachine[currentStatus];\n","import _ from \"lodash\";\n\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { getAllTasks } from \"apis/jsonplaceholder\";\n\nimport { Task, Id } from \"common\";\nimport { LoadingEntitiesState } from \"state/types/utils\";\n\nimport { getNextStatus } from \"./tasks.utils\";\n\nexport type TasksState = LoadingEntitiesState<Task>;\n\nconst tasksSliceName = \"tasks\";\n\nconst initialState: TasksState = {\n  loading: true,\n  entities: {},\n};\n\nexport const fetchTasks = createAsyncThunk(\n  `${tasksSliceName}/fetchTasks`,\n  getAllTasks\n);\n\nconst tasksSlice = createSlice({\n  name: tasksSliceName,\n  initialState,\n  reducers: {\n    setNextTaskState(state, { payload: id }: PayloadAction<Id>) {\n      const task = state.entities[id];\n      if (_.isNil(task)) return;\n      task.status = getNextStatus(task.status);\n      return state;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchTasks.fulfilled,\n      (state: TasksState, { payload: tasks }: PayloadAction<Array<Task>>) => {\n        tasks.forEach((task) => {\n          state.entities[task.id] = task;\n        });\n        state.loading = false;\n      }\n    );\n  },\n});\n\nexport const {\n  reducer: tasksReducer,\n  actions: { setNextTaskState },\n} = tasksSlice;\n","import { Task } from \"common\";\n\nimport { validateFormatAxiosResponse } from \"apis/utils\";\n\nimport { getAllTasksSchema } from \"schemas/apis/jsonplaceholder\";\n\nimport { jsonplaceholderClient } from \"./common\";\n\nexport const getAllTasks = (): Promise<Array<Task>> =>\n  jsonplaceholderClient\n    .get<Array<Task>>(\"/todos\")\n    .then(validateFormatAxiosResponse(getAllTasksSchema()));\n","import { Status, Id, Task } from \"common\";\n\nimport type { RootState } from \"state/types\";\n\nconst statusOrder = {\n  [Status.TODO]: 1,\n  [Status.IN_PROGRESS]: 2,\n  [Status.DONE]: 3,\n} as const;\n\nexport const selectTasksLoading = ({\n  tasks: { loading },\n}: RootState): boolean => loading;\n\nexport const selectTaskById =\n  (taskId: Id) =>\n  ({ tasks }: RootState): Task =>\n    tasks.entities[taskId];\n\nexport const selectAllTasks = ({ tasks }: RootState): Array<Task> =>\n  Object.values(tasks.entities).sort(\n    ({ status: statusA }, { status: statusB }) =>\n      statusOrder[statusA as Status] - statusOrder[statusB as Status]\n  );\n\nexport const selectTasksWithStatus =\n  (status: Status) =>\n  ({ tasks }: RootState): Array<Task> =>\n    Object.values(tasks.entities).filter((task) => task.status === status);\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { getAllUsers } from \"apis/jsonplaceholder\";\n\nimport { User } from \"common\";\n\nimport { LoadingEntitiesState } from \"state/types\";\n\nconst usersSliceName = \"users\";\n\nexport type UsersState = LoadingEntitiesState<User>;\n\nexport const fetchUsers = createAsyncThunk(\n  `${usersSliceName}/fetchUsers`,\n  getAllUsers\n);\n\nconst initialState: UsersState = {\n  entities: {},\n  loading: true,\n};\n\nconst usersSlice = createSlice({\n  name: usersSliceName,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchUsers.fulfilled,\n      (state: UsersState, { payload: users }: PayloadAction<Array<User>>) => {\n        users.forEach((user) => {\n          state.entities[user.id] = user;\n          state.loading = false;\n        });\n      }\n    );\n  },\n});\n\nexport const { reducer: usersReducer } = usersSlice;\n","import { Id, User } from \"common\";\n\nimport { RootState } from \"state/types\";\n\nexport const selectUserById =\n  (id: Id) =>\n  ({ users: { entities } }: RootState): User =>\n    entities[id];\n\nexport const selectUsersLoading = ({\n  users: { loading },\n}: RootState): boolean => loading;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport { tasksReducer } from \"state/slices/tasks\";\nimport { usersReducer } from \"state/slices/users\";\n\nexport const store = configureStore({\n  reducer: {\n    tasks: tasksReducer,\n    users: usersReducer,\n  },\n});\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"state/types\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Status } from \"common\";\n\nconst statusDisplayNames = {\n  [Status.TODO]: \"Todo\",\n  [Status.IN_PROGRESS]: \"In progress\",\n  [Status.DONE]: \"Done\",\n} as const;\n\nexport const getStatusDisplayName = (status: Status): string =>\n  statusDisplayNames[status];\n","import ColorHash from \"color-hash\";\n\nconst sanitizeWhitespaces = (str = \"\"): string => {\n  const doubleWhitespaces = \"  \";\n  const singleWhitespace = \" \";\n\n  let resultString = str;\n\n  while (resultString.includes(doubleWhitespaces)) {\n    resultString = resultString.replaceAll(doubleWhitespaces, singleWhitespace);\n  }\n\n  return resultString;\n};\n\nexport const stringAvatar = (\n  name = \"\"\n): { sx: { bgcolor: string }; children: string } => {\n  const colorHash = new ColorHash();\n\n  // prettier-ignore\n  const [\n    [firstNameFirstLetter = \"\"] = \"\",\n    [lastNameFirstLetter = \"\"] = \"\"\n  ] = sanitizeWhitespaces(name).split(\" \");\n\n  return {\n    sx: {\n      bgcolor: colorHash.hex(name),\n    },\n    children: `${firstNameFirstLetter.toUpperCase()}${lastNameFirstLetter.toUpperCase()}`,\n  };\n};\n","import React from \"react\";\nimport { Avatar, Skeleton, Tooltip } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectUserById, selectUsersLoading } from \"state\";\n\nimport { Id } from \"common\";\n\nimport { stringAvatar } from \"./user-avatar.utils\";\n\nimport \"./user-avatar.scss\";\n\nexport const UserAvatar: React.FC<{ userId: Id }> = ({ userId }) => {\n  const isUserLoading = useSelector(selectUsersLoading);\n  const user = useSelector(selectUserById(userId));\n\n  return isUserLoading ? (\n    <Skeleton variant=\"circular\" className=\"user-avatar\" />\n  ) : (\n    <Tooltip title={user.name}>\n      <Avatar className=\"user-avatar\" {...stringAvatar(user.name)} />\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport _ from \"lodash/fp\";\nimport { ListItem, ListItemAvatar, ListItemText } from \"@mui/material\";\nimport { useAppDispatch, setNextTaskState } from \"state\";\nimport type { Task as TaskEntity } from \"common\";\nimport { UserAvatar } from \"ui/components/user-avatar\";\nimport { getStatusDisplayName } from \"ui/common\";\nimport { TaskType } from \"./task.types\";\nimport \"./task.scss\";\n\n\ntype TaskProps = {\n  task: TaskEntity;\n  taskType: TaskType;\n  style: any;\n};\n\nexport const Task: React.FC<TaskProps> = ({ task, taskType, style }) => {\n  const dispatch = useAppDispatch();\n\n  const handleChangeStatus: () => void = _.flow([\n    () => setNextTaskState(task.id),\n    dispatch,\n  ]);\n\n  const isFullTask = taskType === TaskType.FULL;\n\n  return (\n    <ListItem className=\"task\" onClick={handleChangeStatus} style={style}>\n      <ListItemAvatar>\n        <UserAvatar userId={task.userId} />\n      </ListItemAvatar>\n      <ListItemText primary={task.title} className=\"task-title\" />\n      {isFullTask ? (\n        <ListItemText\n          primary={getStatusDisplayName(task.status)}\n          className=\"task-status\"\n        />\n      ) : null}\n    </ListItem>\n  );\n};\n","import React from \"react\";\nimport { List, Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { Status } from \"common\";\nimport { selectTasksWithStatus } from \"state\";\nimport { getStatusDisplayName } from \"ui/common\";\nimport { Task, TaskType } from \"ui/components/task\";\nimport \"./tasks-board-column.scss\";\nimport { Virtuoso } from \"react-virtuoso\";\n\ntype Props = {\n  status: Status;\n};\n\nexport const TasksBoardColumn: React.FC<Props> = ({ status }) => {\n  const tasks = useSelector(selectTasksWithStatus(status));\n\n  return (\n    <div className=\"tasks-board-column-wrapper\">\n      <Typography variant=\"h4\" className=\"tasks-board-column-title\">\n        {getStatusDisplayName(status)}\n      </Typography>\n      <List className=\"tasks-board-column-list\">\n        <Virtuoso\n          data={tasks}\n          itemContent={(index) => (\n            <Task\n              key={tasks[index].id}\n              task={tasks[index]}\n              taskType={TaskType.SHORT}\n              style={{}}\n            />\n          )}\n        />\n      </List>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { CircularProgress } from \"@mui/material\";\n\nimport \"./spinner.scss\";\n\nexport const Spinner: React.FC = () => (\n  <div className=\"spinner-wrapper\">\n    <CircularProgress />\n  </div>\n);\n","import React from \"react\";\nimport { Paper, Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectTasksLoading } from \"state\";\n\nimport { Status } from \"common\";\n\nimport { TasksBoardColumn } from \"ui/components/tasks-board-column\";\nimport { Spinner } from \"ui/components/spinner\";\n\nimport \"./tasks-board.scss\";\n\nexport const TasksBoard: React.FC = () => {\n  const isLoading = useSelector(selectTasksLoading);\n\n  return (\n    <Paper className=\"tasks-board-wrapper\">\n      <Typography variant=\"h3\">Board</Typography>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <div className=\"tasks-board\">\n          <TasksBoardColumn key={Status.TODO} status={Status.TODO} />\n          <TasksBoardColumn key={Status.TODO} status={Status.IN_PROGRESS} />\n          <TasksBoardColumn key={Status.TODO} status={Status.DONE} />\n        </div>\n      )}\n    </Paper>\n  );\n};\n","import React from \"react\";\nimport { Paper, Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { selectTasksLoading, selectAllTasks } from \"state\";\nimport { TaskType, Task } from \"ui/components/task\";\nimport { Spinner } from \"ui/components/spinner\";\nimport \"./tasks-list.scss\";\nimport { Virtuoso } from \"react-virtuoso\";\n\nexport const TasksList: React.FC = () => {\n  const isTasksLoading = useSelector(selectTasksLoading);\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <Paper className=\"tasks-list-wrapper\">\n      <Typography variant=\"h3\">Ticket list</Typography>\n      {isTasksLoading ? (\n        <Spinner />\n      ) : (\n        <Virtuoso\n          data={tasks}\n          itemContent={(index) => (\n            <Task\n              key={tasks[index].id}\n              task={tasks[index]}\n              taskType={TaskType.FULL}\n              style={{}}\n            />\n          )}\n        />\n      )}\n    </Paper>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Container } from \"@mui/material\";\n\nimport { useAppDispatch, fetchUsers, fetchTasks } from \"state\";\n\nimport { TasksBoard } from \"ui/components/tasks-board\";\nimport { TasksList } from \"ui/components/tasks-list\";\n\nimport \"./jira.scss\";\n\nexport const Jira: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n    dispatch(fetchUsers());\n  }, []);\n\n  return (\n    <Container className=\"jira-page\">\n      <TasksList />\n      <TasksBoard />\n    </Container>\n  );\n};\n","import React from \"react\";\n\nimport { Jira } from \"ui/pages/jira\";\n\nimport \"./app.scss\";\n\nexport const App: React.FC = () => <Jira />;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"ui/app\";\n\nimport { store } from \"state\";\n\nimport * as serviceWorker from \"serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}